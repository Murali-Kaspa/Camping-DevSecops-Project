pipeline {
    agent {
        node { label 'Dev-Agent' }
    }

    tools {
        nodejs 'nodejs16'
    }

    environment {
        SCANNER_HOME = tool 'sonarscanner-application'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Install Git') {
            steps {
                sh '''
                    sudo yum install -y git
                    echo "Displaying GIT Version"
                    git --version
                '''
            }
        }

        stage('Clone Git Repo') {
            steps {
                sh '''
                    rm -rf Camping-DevSecops-Project
                    git clone https://github.com/Murali-Kaspa/Camping-DevSecops-Project.git
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Camping-DevSecops-Project') {
                    withSonarQubeEnv('sonarscanner-application') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=camp \
                            -Dsonar.projectName=camp \
                            -Dsonar.sources=.
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-scanner-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('Camping-DevSecops-Project') {
                    sh 'npm install'
                }
            }
        }

        stage('Install Docker') {
            steps {
                sh '''
                    sudo yum install -y docker
                    echo "Docker Installed"
                    sudo service docker start
                    sudo systemctl enable docker
                    sudo service docker status
                    sudo usermod -aG docker $USER
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-credentials') {
                        sh '''
                            cd Camping-DevSecops-Project
                            sudo docker build -t dev-image .
                        '''
                    }
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                    sudo yum remove trivy -y
                    wget https://github.com/aquasecurity/trivy/releases/download/v0.64.1/trivy_0.64.1_Linux-64bit.rpm
                    sudo rpm -ivh trivy_0.64.1_Linux-64bit.rpm
                    trivy --version
                '''
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                sh 'sudo trivy image dev-image'
            }
        }
        stage('Docker Tagging'){
            steps{
                sh 'sudo docker tag dev-image muralikaspa1998/campimage:latest'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-credentials') {
                        sh 'docker push muralikaspa1998/campimage:latest'
                    }
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                sh 'docker run -d --name campingapplication -p 1234:3000 muralikaspa1998/campimage:latest'
            }
        }
    }

    post {
        always {
            echo 'Sending Slack Notification...'
            slackSend(
                channel: 'my-colleagues',
                message: "*${currentBuild.currentResult}:* Job `${env.JOB_NAME}`\nBuild #${env.BUILD_NUMBER}\n<${env.BUILD_URL}|Click here for more info>"
            )
        }
    }
}
